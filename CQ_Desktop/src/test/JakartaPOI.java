
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.Principal;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;

/*
 * Copyright (C) 2018 rafael.lopes
 *
 * Este programa é um software livre: você pode redistribuí-lo e / ou modificar
 * sob os termos da GNU General Public License, conforme publicado pela
 * a Free Software Foundation, seja a versão 3 da Licença, quanto
 * qualquer versão posterior.
 *
 * Este programa é distribuído na esperança de que seja útil,
 * mas SEM QUALQUER GARANTIA; sem a garantia implícita de
 * COMERCIALIZAÇÃO OU APTIDÃO PARA UM PROPÓSITO PARTICULAR. Veja o
 * GNU General Public License para obter mais detalhes.
 *
 * Você deve ter recebido uma cópia da GNU General Public License
 *  juntamente com este programa. Caso contrário, veja <http://www.gnu.org/licenses/>.
 */
/**
 *
 * @author rafael.lopes
 */
public class JakartaPOI extends javax.swing.JFrame {

    /**
     * Creates new form JakartaPOI
     */
    public JakartaPOI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 758, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 537, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JakartaPOI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JakartaPOI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JakartaPOI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JakartaPOI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JakartaPOI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

//    public StringBuilder getText() throws IOException {
        // crio o arquivo para poder captura-lo pelo input stream
//        File arquivo = new File(Principal + Principal.ARQUIVO_DO_CONTRATO);

//        // capturo o arquivo e jogo ele dentro de um input stream para a biblioteca da API poder manipular
//        InputStream inputStream = new FileInputStream(arquivo);
//
//        // crio o objeto que manipulará o arquivo do word
//        XWPFDocument document = new XWPFDocument(inputStream);
//
//        // usando o wordExtractor 
//        // objeto responsavel pela extração dos dados do arquivo word
//        XWPFWordExtractor extractor = new XWPFWordExtractor(document);
//
//        String conteudo = extractor.getText(); // com este método eu captura o texto do arquivo dentro de uma String
//        String stringBuilder = conteudo; // assim fica mais facil e mais rápida a leitura da string
//        // basta agora apenas tratar a stringBuilder para fazer o replace
//        Range range = document.getRange();
//
//
//        //range.insertBefore("Paulo Fernandes: marcosvperboni@gmail.com\n");
//        range.insertAfter("\nPaulo Fernandes: marcosvperboni@gmail.com");
//
//        /*
//         PRECISO INSERIR UMA TABELA DE UMA LINHA E TRÊS COLUNAS
//         */
//        range.replaceText(Principal.VAR_NOME_EMPRESA, Principal.VALOR_MULTA);
//        range.replaceText(Principal.VAR_VALOR_CONTRATO, Principal.VALOR_MULTA);
//        range.replaceText(Principal.VAR_VALOR_MULTA, Principal.VALOR_MULTA);
//
//        return new StringBuilder(range.text());
//    }

}
