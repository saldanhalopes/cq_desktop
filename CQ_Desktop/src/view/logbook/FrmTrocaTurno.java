package view.logbook;

import DAO.TrocaTurnoDAO;
import model.Cromatografo;
import model.TrocaTurno;
import model.Usuario;
import util.DataHora;
import view.login.FrmSalvar;
import java.awt.Dialog;
import java.awt.Dimension;

import java.util.Date;
import javax.swing.JOptionPane;

import java.awt.print.PrinterException;
import javax.swing.*;
import java.text.MessageFormat;

/**
 *
 * @author rafael.lopes
 */
public class FrmTrocaTurno extends javax.swing.JDialog {

    private static String sys_name;
    private static String campanha_name;
    private boolean novoTrocaTurno = false;
    private int troca_turno_id;

    /**
     * Creates new form FrmTrocaTurno
     *
     * @param parent
     * @param modal
     * @param system_name
     */
    public FrmTrocaTurno(java.awt.Frame parent, boolean modal,
            String system_name, String campanha) {
        super(parent, modal);
        initComponents();
        sys_name = system_name;
        campanha_name = campanha;
        novoTrocaTurno = true;
        setLocationRelativeTo(null);
        setTitle("Troca de Turno");
        this.setResizable(false);
        btnExcluirTurno.setVisible(false);
        readTurno();
    }

    public FrmTrocaTurno(java.awt.Frame parent, boolean modal, int turno_id) {
        super(parent, modal);
        initComponents();
        troca_turno_id = turno_id;
        novoTrocaTurno = false;
        setLocationRelativeTo(null);
        setTitle("Troca de Turno");
        this.setResizable(false);
        readTurno();
        carregarDados(turno_id);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescricaoTurno = new javax.swing.JTextArea();
        btnSalvarTurno = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnExcluirTurno = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmbTurno = new javax.swing.JComboBox();
        btnImprimirRelatorio = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Descrição");

        txtDescricaoTurno.setColumns(20);
        txtDescricaoTurno.setRows(5);
        jScrollPane1.setViewportView(txtDescricaoTurno);

        btnSalvarTurno.setText("Salvar");
        btnSalvarTurno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarTurnoActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnExcluirTurno.setText("Excuir");
        btnExcluirTurno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirTurnoActionPerformed(evt);
            }
        });

        jLabel2.setText("Turno:");

        btnImprimirRelatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/print.png"))); // NOI18N
        btnImprimirRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirRelatorioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnImprimirRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnExcluirTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 373, Short.MAX_VALUE)
                        .addComponent(btnSalvarTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbTurno, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbTurno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnImprimirRelatorio)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnExcluirTurno)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCancelar)
                        .addComponent(btnSalvarTurno)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalvarTurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarTurnoActionPerformed
        if (cmbTurno.getSelectedItem().toString().isEmpty() || cmbTurno.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Turno inválido");
            cmbTurno.requestFocus();
        } else if (txtDescricaoTurno.getText().isEmpty() || txtDescricaoTurno.getText() == null) {
            JOptionPane.showMessageDialog(null, "Descrição inválida");
            txtDescricaoTurno.requestFocus();
        } else if (novoTrocaTurno) {
            FrmSalvar frmSalvar = new FrmSalvar(null, true);
            frmSalvar.setVisible(true);
            if (FrmSalvar.senha()) {
                criarTrocaTurno();
            }
        } else {
            FrmSalvar frmSalvar = new FrmSalvar(null, true);
            frmSalvar.setVisible(true);
            if (FrmSalvar.senha()) {
                atulizarTrocaTurno();
            }
        }
    }//GEN-LAST:event_btnSalvarTurnoActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnExcluirTurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirTurnoActionPerformed
        deletarTrocaTurno(troca_turno_id);
    }//GEN-LAST:event_btnExcluirTurnoActionPerformed

    private void btnImprimirRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirRelatorioActionPerformed
        int dialogResult = JOptionPane.showConfirmDialog(null,
                "Deseja Imprimir Relatorio de Troca de Turno ?", "Aviso", JOptionPane.YES_NO_OPTION);
        if (dialogResult == 0) {
            MessageFormat header = createFormat("Passagem de Turno : " + cmbTurno.getSelectedItem().toString());
            MessageFormat footer = createFormat(System.getProperty("user") + "  -  " + DataHora.getStringDateTime(new Date()));
            boolean interactive = true;
            boolean background = true;

            PrintingTask task = new PrintingTask(header, footer, interactive);
            if (background) {
                task.execute();
            } else {
                task.run();
            }
        }
    }//GEN-LAST:event_btnImprimirRelatorioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmTrocaTurno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmTrocaTurno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmTrocaTurno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmTrocaTurno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmTrocaTurno dialog = new FrmTrocaTurno(new javax.swing.JFrame(), true, null, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    public static javax.swing.JButton btnExcluirTurno;
    private javax.swing.JButton btnImprimirRelatorio;
    public static javax.swing.JButton btnSalvarTurno;
    private javax.swing.JComboBox cmbTurno;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtDescricaoTurno;
    // End of variables declaration//GEN-END:variables

    private void carregarDados(int id) {
        TrocaTurno turno = new TrocaTurno();
        turno.setTroca_turno_id(id);
        TrocaTurnoDAO turnoDao = new TrocaTurnoDAO();
        turnoDao.selectTrocaTurno(turno);
        txtDescricaoTurno.setText(turno.getDescricao_turno());
        String[] tipo = {turno.getTurno()};
        cmbTurno.setSelectedItem(tipo[0]);
        btnExcluirTurno.setVisible(false);
        btnImprimirRelatorio.setVisible(true);
        if (turno.getUser_name().getUser().equals(System.getProperty("user"))) {
            btnSalvarTurno.setVisible(true);
        } else {
            btnSalvarTurno.setVisible(false);
            cmbTurno.setEnabled(false);
        }
    }

    private void readTurno() {
        cmbTurno.removeAllItems();
        cmbTurno.addItem("");
        cmbTurno.addItem("1 Turno");
        cmbTurno.addItem("2 Turno");
        cmbTurno.addItem("3 Turno");
        btnImprimirRelatorio.setVisible(false);
    }

    private void criarTrocaTurno() {
        TrocaTurno turno = new TrocaTurno();
        TrocaTurnoDAO turnoDAO = new TrocaTurnoDAO();
        try {
            Usuario user = new Usuario();
            Cromatografo equip = new Cromatografo();
            equip.setSystem_name(sys_name);
            turno.setCromatografo(equip);
            turno.setTurno(cmbTurno.getSelectedItem().toString());
            turno.setDescricao_turno(txtDescricaoTurno.getText());
            turno.setCampanha(campanha_name);
            turno.setData_registro(DataHora.getTimestampDate(new Date()));
            user.setUser(System.getProperty("user"));
            turno.setUser_name(user);
            turnoDAO.createColunaConfig(turno);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar dados: " + e);
        } finally {
            dispose();
        }
    }

    private void atulizarTrocaTurno() {
        TrocaTurno turno = new TrocaTurno();
        TrocaTurnoDAO turnoDAO = new TrocaTurnoDAO();
        try {
            Usuario user = new Usuario();
            turno.setTroca_turno_id(troca_turno_id);
            turno.setTurno(cmbTurno.getSelectedItem().toString());
            turno.setDescricao_turno(txtDescricaoTurno.getText());
            turno.setData_registro(DataHora.getTimestampDate(new Date()));
            user.setUser(System.getProperty("user"));
            turno.setUser_name(user);
            turnoDAO.updateTrocaTurno(turno);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar dados: " + e);
        } finally {
            dispose();
        }
    }

    private void deletarTrocaTurno(int id) {
        TrocaTurno turno = new TrocaTurno();
        TrocaTurnoDAO turnoDAO = new TrocaTurnoDAO();
        try {
            int dialogResult = JOptionPane.showConfirmDialog(null,
                    "Realmente Deseja Excluir Esse Registro?", "Aviso", JOptionPane.YES_NO_OPTION);
            if (dialogResult == 0) {
                turno.setTroca_turno_id(id);
                turnoDAO.deleteTrocaTurno(turno);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atulalizar dados: " + e);
        } finally {
            dispose();
        }
    }

    private class PrintingTask extends SwingWorker<Object, Object> {

        private final MessageFormat headerFormat;
        private final MessageFormat footerFormat;
        private final boolean interactive;
        private volatile boolean complete = false;
        private volatile String message;

        public PrintingTask(MessageFormat header, MessageFormat footer,
                boolean interactive) {
            this.headerFormat = header;
            this.footerFormat = footer;
            this.interactive = interactive;
        }

        @Override
        protected Object doInBackground() {
            try {
                complete = txtDescricaoTurno.print(headerFormat, footerFormat,
                        true, null, null, interactive);
                message = "Impressão " + (complete ? "Finalizada" : "Cancelada");
            } catch (PrinterException ex) {
                message = "Desculpe, ocorreu um erro na impressora";
            } catch (SecurityException ex) {
                message = "Desculpe, não foi possivel acessar a impressora por motivos de segurança";
            }
            return null;
        }

        @Override
        protected void done() {
            message(!complete, message);
        }
    }

    private MessageFormat createFormat(String texto) {
        if (texto != null && texto.length() > 0) {
            try {
                return new MessageFormat(texto);
            } catch (IllegalArgumentException e) {
                error("Desculpe, este formato é inválido.");
            }
        }
        return null;
    }

    private void message(boolean error, String msg) {
        int type = (error ? JOptionPane.ERROR_MESSAGE
                : JOptionPane.INFORMATION_MESSAGE);
        JOptionPane.showMessageDialog(this, msg, "Imprimindo", type);
    }

    private void error(String msg) {
        message(true, msg);
    }

}
